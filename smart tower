  
#define BLYNK_TEMPLATE_ID "xxxxxxxxxxxxxxxxxx"
#define BLYNK_TEMPLATE_NAME "xxxxxxxxxxxxxxxxxx"
#define BLYNK_AUTH_TOKEN "xxxxxxxxxxxxxxxxxxxx"

#define BLYNK_PRINT Serial

#include <PZEM004Tv30.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);

char auth[] = BLYNK_AUTH_TOKEN;

char ssid[] = "hello";
char pass[] = "123456789";

BLYNK_WRITE(V0)  
{
  int value = param.asInt();
  Serial.println(value);
  if(value == 1)
  {
    digitalWrite(D5, LOW);
    Serial.println("LED ON");
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("street light ON");
    delay(1000);
  }
  if(value == 0)
  {
     digitalWrite(D5, HIGH);
     Serial.println("LED OFF");
     lcd.clear();
     lcd.setCursor(0, 0);
     lcd.print("street light OFF");
     delay(1000);
  }
}
PZEM004Tv30 pzem(D3, D4);

void setup() {
Serial.begin(9600);
Blynk.begin(auth, ssid, pass);
pinMode(D5,OUTPUT);
pinMode(D6,OUTPUT);
lcd.init();
lcd.backlight();
lcd.setCursor(0, 0);
lcd.print("Smart Tower");
lcd.setCursor(0, 1);
lcd.print("using IOT");
delay(3000);
lcd.clear();
}

void loop() {
Blynk.run();
float voltage = pzem.voltage();
if (voltage != NAN) {
Serial.print("Voltage: ");
Serial.print(voltage);
Serial.println("V");
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("V:");
lcd.print(voltage);
} else {
Serial.println("Error reading voltage");
}
float current =  pzem.current();
if (current != NAN) {
Serial.print("Current: ");
Serial.print(current);
Serial.println("A");
lcd.setCursor(0, 1);
lcd.print("I:");
lcd.print(current);
} else {
Serial.println("Error reading current");
}
float power = pzem.power();
if (current != NAN) {
Serial.print("Power: ");
Serial.print(power);
Serial.println("W");
lcd.setCursor(7, 0);
lcd.print("P:");
lcd.print(power);
} else {
Serial.println("Error reading power");
}
float frequency = pzem.frequency();
if (current != NAN) {
Serial.print("Frequency: ");
Serial.print(frequency, 1);
Serial.println("Hz");
lcd.setCursor(7, 1);
lcd.print("f:");
lcd.print(frequency);
} else {
Serial.println("Error reading frequency"); 
}
float pf = pzem.pf();
if (current != NAN) {
Serial.print("PF: ");
Serial.println(pf);
delay(3000);
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("pf:");
lcd.print(pf);
} else {
Serial.println("Error reading power factor");
}
float energy = pzem.energy();
if (current != NAN) {
Serial.print("Energy: ");
Serial.print(energy, 3);
Serial.println("kWh");
lcd.setCursor(0, 1);
lcd.print("E:");
lcd.print(energy);
} else {
Serial.println("Error reading energy");
}
delay(2000);
}
